#===================================================================
# CCR HPC Sanity Test Suite. Simple sanity checks for the clusters
#===================================================================

#-------------------------------------------------------------------
# Test reading/writing to local/global scratch space
#-------------------------------------------------------------------
scratch:
  summary: Test reading/writing to scratch
  schedule:
    nodes: 1
    tasks_per_node: 1
  build:
    source_path: scratch.sh
  run:
    cmds:
      - '{{sched.test_cmd}} ./scratch.sh'
  result_parse:
    regex:
      scratch_out:
        regex: '^(.*) - ccr sanitarium'
        match_select: 'all'
        action: 'store'
      result:
        regex: 'ccr sanitarium'
        action: 'store_true'

#-------------------------------------------------------------------
# Job Array Test
#-------------------------------------------------------------------
jobarray:
  summary: Test for Slurm job array support
  schedule:
    nodes: 1
    tasks_per_node: 1
    slurm:
      sbatch_extra: ['--array 1-5']
  build:
    source_path: jobarray.sh
  run:
    cmds:
      - '{{sched.test_cmd}} --output=array_%A-%a.out ./jobarray.sh'
  result_parse:
    regex:
      slurm_array_task_id:
        regex: 'SLURM_ARRAY_TASK_ID=(.+)'
        files: '*.out'
        per_file: name
      result:
        regex: 'SLURM_ARRAY_TASK_ID=(.+)'
        files: '*.out'
        per_file: all
        action: store_true

#-------------------------------------------------------------------
# MPI Test
#-------------------------------------------------------------------
openmpi:
  summary: A basic OpenMPI test. Uses openmpi module to run supermagic
  schedule:
    nodes: 2
    slurm:
      sbatch_extra: ['--constraint=IB']
  build:
    modules: ['gcc/11.2.0', 'openmpi/4.1.1']
    env:
      CC: mpicc
    source_path: supermagic-1.2.tar.gz
    cmds:
      - ./configure
      - make
  run:
    modules: ['gcc/11.2.0', 'openmpi/4.1.1']
    cmds:
      - '{{sched.test_cmd}} ./supermagic'
  result_parse:
    regex:
      num_tests:
        regex: 'num tests.*: (\\d+)'
      result:
        regex:  '<results> PASSED'
        action: store_true

#-------------------------------------------------------------------
# GPU Test
#-------------------------------------------------------------------
gpu:
  summary: A basic GPU test. Uses CUDA module to run vector_add
  schedule:
    nodes: 1
    tasks_per_node: 1
    slurm:
      sbatch_extra: ['--gres gpu:1']
  build:
    modules: ['nvhpc/21.11']
    source_path: vector_add.cu
    cmds:
      - nvcc vector_add.cu -o vector_add
  run:
    modules: ['nvhpc/21.11']
    cmds:
      - '{{sched.test_cmd}} ./vector_add'
  result_parse:
    regex:
      result:
        regex:  'PASSED'
        action: 'store_true'

#-------------------------------------------------------------------
# Intel MPI Test
#-------------------------------------------------------------------
intelmpi:
  summary: A basic Intel MPI test.
  schedule:
    nodes: 2
    slurm:
      sbatch_extra: ['--constraint=IB']
      mpi_cmd: srun
  build:
    modules: ['intel/2022.00']
    env:
      CC: mpicc
    source_path: supermagic-1.2.tar.gz
    cmds:
      - ./configure
      - make
  run:
    env:
      I_MPI_PMI_LIBRARY: /opt/software/slurm/lib64/libpmi.so
      I_MPI_DEBUG: 4
    modules: ['intel/2022.00']
    cmds:
      - '{{sched.test_cmd}} ./supermagic'
  result_parse:
    regex:
      num_tests:
        regex: 'num tests.*: (\\d+)'
      result:
        regex:  '<results> PASSED'
        action: store_true

#-------------------------------------------------------------------
# Intel MPI PingPong
#-------------------------------------------------------------------
intelpong:
  summary: Intel MPI PingPong test.
  schedule:
    nodes: 2
    slurm:
      sbatch_extra: ['--constraint=IB']
      mpi_cmd: srun
  run:
    env:
      I_MPI_PMI_LIBRARY: /opt/software/slurm/lib64/libpmi.so
      I_MPI_DEBUG: 4
    modules: ['intel/2022.00']
    cmds:
      - '{{sched.test_cmd}} IMB-MPI1 PingPong'
  result_parse:
    regex:
      fabric:
        regex: 'libfabric provider: (.+)'
      max_bytes:
        regex: '# Maximum message length in bytes:   (\d+)'
      mbytes_sec:
        regex: '4194304\s+10\s+\d+\.\d+\s+(.+)'
      result:
        regex: '4194304\s+10\s+\d+\.\d+\s+(.+)'
        action: store_true
