#===================================================================
# CCR HPC Sanity Test Suite. Simple sanity checks for the clusters
#===================================================================

#-------------------------------------------------------------------
# Test reading/writing to local/global scratch space
#-------------------------------------------------------------------
scratch:
  summary: Test reading/writing to scratch
  slurm:
    num_nodes: 1
    tasks_per_node: 1
  build:
    source_location: scratch.sh
  run:
    cmds:
      - '{{sched.test_cmd}} ./scratch.sh'
  results:
    regex:
      - key: scratch_out
        regex: '^(.*) - ccr sanitarium'
        match_type: 'all'
        action: 'store'
      - key: result
        regex: 'ccr sanitarium'
        threshold: 2 
        action: 'store_true'

#-------------------------------------------------------------------
# Job Array Test
#-------------------------------------------------------------------
jobarray:
  summary: Test for Slurm job array support
  slurm:
    num_nodes: 1
    tasks_per_node: 1
    array: '1-5'
  build:
    source_location: jobarray.sh
  run:
    cmds:
      - '{{sched.test_cmd}} --output=array_%A-%a.out ./jobarray.sh'
  results:
    regex:
      - key: slurm_array_task_id
        regex: 'SLURM_ARRAY_TASK_ID=(\\d+)'
        files: '*.out'
        per_file: fullname
      - key: result
        regex: 'SLURM_ARRAY_TASK_ID=(\\d+)'
        files: '*.out'
        per_file: all

#-------------------------------------------------------------------
# MPI Test
#-------------------------------------------------------------------
mpi:
  summary: A basic MPI test. Uses openmpi module to run supermagic
  build:
    modules: [openmpi/3.1.4]
    env:
      CC: mpicc
    source_location: supermagic-master.zip
    cmds:
      - bash ./autogen
      - ./configure
      - make
  slurm:
    num_nodes: 2
    tasks_per_node: 2
    constraint: IB
  run:
    modules: [openmpi/3.1.4]
    cmds:
      - '{{sched.test_cmd}} --constraint=IB ./supermagic'
  results:
    regex:
      - key: num_tests
        regex: 'num tests.*: (\\d+)'
      - key: result
        regex:  '<results> PASSED'

#-------------------------------------------------------------------
# GPU Test
#-------------------------------------------------------------------
gpu:
  summary: A basic GPU test. Uses CUDA module to run vector_add
  build:
    modules: [cuda/10.2]
    source_location: vector_add.cu
    cmds:
      - nvcc vector_add.cu -o vector_add
  slurm:
    num_nodes: 1
    tasks_per_node: 1
    gres: 'gpu:1'
  run:
    modules: [cuda/10.2]
    cmds:
      - '{{sched.test_cmd}} ./vector_add'
  results:
    regex:
      - key: result
        regex:  'PASSED'
        threshold: 5 
        action: 'store_true'
