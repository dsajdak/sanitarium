#
# Miscellaneous Application Tests
#
#-------------------------------------------------------------------
# NWChem Test
#-------------------------------------------------------------------
nwchem:
  summary: basic NWChem test, C2H4
  build:
    source_path: nwchem-c2h4.tar.gz
#  scheduler: slurm
  schedule:
    partition: general-compute
    qos: general-compute
    nodes: 2
    tasks_per_node: 1
    slurm:
       sbatch_extra: ['--constraint=IB|OPA','--constraint=CPU-Gold-6130|CPU-Gold-6230|CPU-Gold-6330']
       mpi_cmd: srun
  run:
    env:
      I_MPI_PMI_LIBRARY: /opt/software/slurm/lib64/libpmi.so
      I_MPI_DEBUG: 4
    modules: ['intel', 'nwchem']
    cmds:
      - '{{sched.test_cmd}} nwchem c2h4.inp'
  result_parse:
    regex:
      result:
        regex:  'Total SCF energy'
        action: store_true
#
# QE 
#
qe:
  summary: basic QE test, C4H8N2
  build:
    source_path: qe-test.tar.gz
  schedule:
    nodes: 1
    tasks_per_node: 2
    slurm:
       mpi_cmd: srun
  run:
    env:
      OMP_NUM_THREADS: 1
    modules: ['foss', 'quantumespresso']
    cmds:
      - '{{sched.test_cmd}} pw.x -in test2.in'
  result_parse:
    regex:
      result:
        regex:  '!    total energy'
        action: store_true
#
# NAMD
#
namd:
  summary: basic NAMD test, JAC1000
  build:
    source_path: namd-jac1000.tar.gz
  schedule:
    nodes: 1
    tasks_per_node: 2
    slurm:
       mpi_cmd: srun
  run:
    modules: ['foss', 'namd']
    cmds:
      - '{{sched.test_cmd}} namd2 jac1000.namd'
  result_parse:
    regex:
      result:
        regex:  'TIMING: 1000'
        action: store_true

#-------------------------------------------------------------------
# svFSI
#-------------------------------------------------------------------
svfsi:
  summary: basic svFSI test
  build:
    source_path: svFSI-test-06-channel-flow-2D.tar.gz
  schedule:
    nodes: 1
    tasks_per_node: 2
    slurm:
       mpi_cmd: srun
  run:
    modules: ['foss', 'svfsi']
    cmds:
      - '{{sched.test_cmd}} svFSI ./svFSI_Taylor-Hood.inp'
  result_parse:
    regex:
      result:
        regex:  'NS   100-1s'
        action: store_true

#-------------------------------------------------------------------
# LAMMPS rhodopsin quick test
#-------------------------------------------------------------------
lammps:
  summary: LAMMPS rhodopsin benchmark
  build:
    source_path: lammps-rhodo.tar.gz
  schedule:
    nodes: 1
    tasks_per_node: 2
    slurm:
       mpi_cmd: srun
  run:
    modules: ['foss', 'lammps']
    cmds:
      - '{{sched.test_cmd}} lmp -in in.rhodo '
  result_parse:
    regex:
      result:
        regex:  'Performance:'
        action: store_true

#-------------------------------------------------------------------
# PETSC quick build and test
#-------------------------------------------------------------------
petsc:
  summary: PETSC ex50 tutorial build/test
  build:
    modules: ['foss','petsc']
    env:
      CC: mpicc
      CXX: mpicxx
    source_path: petsc-ex50.tar.gz
    cmds:
      - make ex50
  schedule:
    nodes: 1
    tasks_per_node: 2
    slurm:
       mpi_cmd: srun
  run:
    modules: ['foss', 'petsc']
    cmds:
      - '{{sched.test_cmd}} ./ex50  -da_grid_x 120 -da_grid_y 120 -pc_type lu -pc_factor_mat_solver_package superlu_dist -ksp_monitor -ksp_view '
  result_parse:
    regex:
      norm:
        regex:  '  1 KSP Residual norm\s+(.+)'
      tol: 
        regex: '   tolerance for zero pivot\s+(.+)'
  result_evaluate:
     result: 'norm < tol'
     
#-------------------------------------------------------------------
# mosdepth
#-------------------------------------------------------------------
mosdepth:
  summary: basic mosdepth test
  build:
    source_path: mosdepth-test.tar.gz
  schedule:
    nodes: 1
    tasks_per_node: 1
  run:
    modules: ['gcc', 'mosdepth']
    cmds:
      - '{{sched.test_cmd}} mosdepth t ./ovl.bam'
  result_parse:
    regex:
      result:
        regex:  'MT	16569	80	0.00	0	1'
        files: 't.mosdepth.summary.txt'
        action: store_true

#-------------------------------------------------------------------
# VCFTools Test
#-------------------------------------------------------------------
vcftools:
  summary: Basic vcftools test
  schedule:
    nodes: 1
    tasks_per_node: 1
  build:
    source_path: input-data.vcf.gz
  run:
    modules: ['gcc', 'vcftools']
    cmds:
      - '{{sched.test_cmd}} vcftools --vcf ./input-data.vcf'
  result_parse:
    regex:
      result:
        regex:  'kept 1356 out of a possible 1356 Sites'
        action: 'store_true'

